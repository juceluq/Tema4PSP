package actividad_3;

import jakarta.mail.Authenticator;
import jakarta.mail.Folder;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Part;
import jakarta.mail.PasswordAuthentication;
import jakarta.mail.Session;
import jakarta.mail.Store;
import jakarta.mail.internet.MimeMultipart;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Properties;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Juan Antonio Uceda Luque
 */
public class Pantalla extends javax.swing.JFrame {

    /**
     * Creates new form Pantalla
     */
    // vumrstopzczjlqvl JAKARTA CONTRASEÃ‘A
    private boolean isConnected = false;
    private Store store;
    private Folder inbox;

    public Pantalla() {
        initComponents();
        buttonGroup1.add(jRBModoImplicito);
        buttonGroup1.add(jRBModoNoImplicito);
        jBRecuperar.setEnabled(false);
        jTBConectar.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLSIMAP = new javax.swing.JLabel();
        jTFIMAP = new javax.swing.JTextField();
        jLPuerto = new javax.swing.JLabel();
        jTFPuerto = new javax.swing.JTextField();
        jRBModoImplicito = new javax.swing.JRadioButton();
        jRBModoNoImplicito = new javax.swing.JRadioButton();
        jLUsuario = new javax.swing.JLabel();
        jTFUsuario = new javax.swing.JTextField();
        jLClave = new javax.swing.JLabel();
        jTBConectar = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAMensaje = new javax.swing.JTextArea();
        jBRecuperar = new javax.swing.JButton();
        jPFClave = new javax.swing.JPasswordField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLAsunto = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Actividad 2 - Juan Antonio Uceda Luque");

        jLSIMAP.setText("Servidor IMAP");

        jTFIMAP.setText("localhost");
        jTFIMAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFIMAPActionPerformed(evt);
            }
        });

        jLPuerto.setText("Puerto:");

        jTFPuerto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFPuertoKeyTyped(evt);
            }
        });

        jRBModoImplicito.setText("Modo Implicito");
        jRBModoImplicito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBModoImplicitoActionPerformed(evt);
            }
        });

        jRBModoNoImplicito.setText("Modo no Implicito");
        jRBModoNoImplicito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBModoNoImplicitoActionPerformed(evt);
            }
        });

        jLUsuario.setText("Usuario:");

        jLClave.setText("Clave:");

        jTBConectar.setText("Conectar");
        jTBConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBConectarActionPerformed(evt);
            }
        });

        jTAMensaje.setEditable(false);
        jTAMensaje.setColumns(20);
        jTAMensaje.setRows(5);
        jScrollPane1.setViewportView(jTAMensaje);

        jBRecuperar.setText("Recuperar mensajes del servidor");
        jBRecuperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRecuperarActionPerformed(evt);
            }
        });

        jLAsunto.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jLAsuntoValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jLAsunto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLSIMAP)
                            .addComponent(jLUsuario))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFIMAP, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLPuerto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTFPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLClave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPFClave, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jRBModoImplicito)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRBModoNoImplicito))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jTBConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 41, Short.MAX_VALUE))
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(228, 228, 228)
                .addComponent(jBRecuperar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jRBModoNoImplicito)
                    .addComponent(jRBModoImplicito)
                    .addComponent(jTFPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLPuerto)
                    .addComponent(jTFIMAP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLSIMAP))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLUsuario)
                    .addComponent(jTFUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLClave)
                    .addComponent(jTBConectar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPFClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jBRecuperar)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRBModoImplicitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBModoImplicitoActionPerformed
        jTBConectar.setEnabled(true);
    }//GEN-LAST:event_jRBModoImplicitoActionPerformed

    private void jTFIMAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFIMAPActionPerformed

    }//GEN-LAST:event_jTFIMAPActionPerformed

    private void jTBConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBConectarActionPerformed
        if (!isConnected) {
            conectar();
        } else {
            desconectar();
        }    }//GEN-LAST:event_jTBConectarActionPerformed

    private void conectar() {
        String host = jTFIMAP.getText();
        String port = jTFPuerto.getText();
        String user = jTFUsuario.getText();
        String password = new String(jPFClave.getPassword());
        boolean implicito = jRBModoImplicito.isSelected();

        Properties props = new Properties();
        props.put("mail.imap.host", host);
        props.put("mail.imap.port", port);
        if (implicito) {
            props.put("mail.imap.ssl.enable", "true");
        } else {
            props.put("mail.imap.starttls.enable", "true");
        }

        Session mailSession = Session.getInstance(props, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(user, password);
            }
        });

        try {
            store = mailSession.getStore("imap");
            store.connect(host, user, password);
            inbox = store.getFolder("INBOX");
            inbox.open(Folder.READ_ONLY);
            isConnected = true;

            jTBConectar.setText("Desconectar");
            jBRecuperar.setEnabled(true);
        } catch (MessagingException e) {
            JOptionPane.showMessageDialog(this, "Error al conectar: " + e.getMessage());
            isConnected = false;
            jTBConectar.setText("Conectar");
            jBRecuperar.setEnabled(false);
        }
    }

    private void desconectar() {
        try {
            if (inbox != null && inbox.isOpen()) {
                inbox.close(false);
            }
            if (store != null && store.isConnected()) {
                store.close();
            }
            isConnected = false;

            jLAsunto.setModel(new DefaultListModel<>());
            jTAMensaje.setText("");

            jTBConectar.setText("Conectar");
            jBRecuperar.setEnabled(false);
        } catch (MessagingException e) {
            JOptionPane.showMessageDialog(null, "Error al cerrar la conexiÃ³n: " + e.getMessage());
        }
    }


    private void jBRecuperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRecuperarActionPerformed
        recuperarMensajes();

     }//GEN-LAST:event_jBRecuperarActionPerformed

    private void recuperarMensajes() {
        try {
            if (!inbox.isOpen()) {
                inbox.open(Folder.READ_ONLY);
            }
            int totalMessages = inbox.getMessageCount();
            // Calcula el Ã­ndice del primer mensaje a recuperar para obtener los Ãºltimos 50 mensajes
            int startMessage = Math.max(1, totalMessages - 49);
            // Recupera los mensajes en el rango calculado
            Message[] messages = inbox.getMessages(startMessage, totalMessages);

            DefaultListModel<String> modeloLista = new DefaultListModel<>();
            // Recorre los mensajes recuperados del mÃ¡s reciente al mÃ¡s antiguo
            for (int i = messages.length - 1; i >= 0; i--) {
                Message message = messages[i];
                // AÃ±ade el asunto y la fecha de envÃ­o de cada mensaje al modelo de lista
                modeloLista.addElement(message.getSubject() + " || " + message.getSentDate());
            }
            jLAsunto.setModel(modeloLista);
        } catch (MessagingException e) {
            JOptionPane.showMessageDialog(this, "Error al recuperar mensajes: " + e.getMessage());
        }
    }


    private void jTFPuertoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFPuertoKeyTyped
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
            evt.consume();
        }
        if (jTFPuerto.getText().length() >= 3) {
            evt.consume();
        }    }//GEN-LAST:event_jTFPuertoKeyTyped

    private void jRBModoNoImplicitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBModoNoImplicitoActionPerformed
        jTBConectar.setEnabled(true);
    }//GEN-LAST:event_jRBModoNoImplicitoActionPerformed

    private void jLAsuntoValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jLAsuntoValueChanged

        // Verifica que hay un elemento seleccionado
        if (jLAsunto.getSelectedIndex() != -1) {
            try {
                int totalMessages = inbox.getMessageCount();
                // Calcula el Ã­ndice del mensaje seleccionado. La lista se muestra en orden inverso (el mÃ¡s reciente primero),
                // por lo que es necesario ajustar el Ã­ndice.
                int selectedMessageIndex = totalMessages - jLAsunto.getSelectedIndex();
                // Recupera el mensaje seleccionado usando su Ã­ndice ajustado
                Message selectedMessage = inbox.getMessage(selectedMessageIndex);
                // Obtiene el contenido del mensaje seleccionado como texto
                String content = obtenerTexto(selectedMessage);
                jTAMensaje.setText(content);
            } catch (MessagingException | IOException ex) {
                JOptionPane.showMessageDialog(null, "Error al leer el mensaje seleccionado: " + ex.getMessage());
            }
        }

    }//GEN-LAST:event_jLAsuntoValueChanged

    private String obtenerTexto(Part p) throws MessagingException, IOException {
        if (p.isMimeType("text/plain")) {
            // Si es texto plano, simplemente devuelve el contenido como una cadena de texto
            return (String) p.getContent();
        } // Verifica si el contenido es HTML (text/html)
        else if (p.isMimeType("text/html")) {
            String html = (String) p.getContent();
            // Llama al mÃ©todo convertirHtmlATexto para convertir el contenido HTML a texto plano
            convertirHtmlATexto(html);
        } // Verifica si el contenido es multipart, lo que significa que puede contener varias partes
        else if (p.isMimeType("multipart/*")) {
            MimeMultipart mimeMultipart = (MimeMultipart) p.getContent();
            StringBuilder result = new StringBuilder();
            // Obtiene la cantidad de partes en el contenido multipart
            int count = mimeMultipart.getCount();
            for (int i = 0; i < count; i++) {
                // Obtiene el texto de cada parte y lo concatena
                String textoParte = obtenerTexto(mimeMultipart.getBodyPart(i));
                result.append(textoParte);
            }
            // Devuelve el resultado de concatenar el texto de todas las partes
            return result.toString();
        }
        return "";
    }

    private String convertirHtmlATexto(String html) {
        return html.replaceAll("<[^>]+>", ""); // Elimina las etiquetas HTML.
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pantalla().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBRecuperar;
    private javax.swing.JList<String> jLAsunto;
    private javax.swing.JLabel jLClave;
    private javax.swing.JLabel jLPuerto;
    private javax.swing.JLabel jLSIMAP;
    private javax.swing.JLabel jLUsuario;
    private javax.swing.JPasswordField jPFClave;
    private javax.swing.JRadioButton jRBModoImplicito;
    private javax.swing.JRadioButton jRBModoNoImplicito;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTAMensaje;
    private javax.swing.JToggleButton jTBConectar;
    private javax.swing.JTextField jTFIMAP;
    private javax.swing.JTextField jTFPuerto;
    private javax.swing.JTextField jTFUsuario;
    // End of variables declaration//GEN-END:variables
}
